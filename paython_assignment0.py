# -*- coding: utf-8 -*-
"""paython assignment0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VLkSVmq_B5ipWyJrauJJNKBXwwLIwCEY
"""

# 1 assignment
# Write a python program to sum of the first n positive integers.

n = int(input("Enter a positive integer: "))
sum = 0

for i in range(1, n+1):
    sum += i

print("The sum of the first", n, "positive integers is", sum)

# 2 ASSIGNMENT
# Write a Python program to count occurrences of a substring in a string.


string = "hello Shravanan, hello Pritesh, hello megha"

substring = "hello"

count = count_substring(string, substring)
print(f"The substring '{substring}' occurs {count} times in the string '{string}'.")

# 3 ASSIGNMENT
# Write a Python program to count the occurrences of each word in a given sentence.

sentence = "Indian Cricket Team has won the world cup twice, which is second higest in the world"
def count_words(sentence):
    words = sentence.split()
    counts = {}
    for word in words:
        if word in counts:
            counts[word] += 1
        else:
            counts[word] = 1
    return counts

counts = count_words(sentence)
print(counts)

# 4 assignment

#  Write a Python program to get a single string from two given strings, separated by a space and swap the first two characters of each string.

def swap_first_two_chars(str1, str2):
    new_str1 = str2[:2] + str1[2:]
    new_str2 = str1[:2] + str2[2:]
    return new_str1 + " " + new_str2

    str1 = "hello"
str2 = "shravu"
result = swap_first_two_chars(str1, str2)
print(result)

# 5 assignment

# Write a Python program to add 'ing' at the end of a given string (length should be at least 3).
# If the given string already ends with 'ing' then add 'ly' instead If the string length of the given
#  string is less than 3, leave it unchanged .

def add_ing_or_ly(string):
    if len(string) < 3:
        return string
    elif string[-3:] == "ing":
        return string + "ly"
    else:
        return string + "ing"


string1 = "walk"
new_string1 = add_ing_or_ly(string1)
print(new_string1)

string2 = "reading"
new_string2 = add_ing_or_ly(string2)
print(new_string2)

string3 = "ME"
new_string3 = add_ing_or_ly(string3)
print(new_string3)

# 6 ASSIGNMENT
# Write a Python program to find the first appearance of the substring 'not' and 'poor' from a given string, if 'not' follows the 'poor', replace the whole 'not'...'poor' substring with 'good'. Return the resulting string

def replace_string(string):
    # Find the index of the first occurrence of 'not' and 'poor'
    index_not = string.find('not')
    index_poor = string.find('poor')

    # Check if 'not' follows 'poor'
    if index_poor < index_not and index_poor != -1 and index_not != -1:
        # Replace the 'not'...'poor' substring with 'good'
        string = string[:index_poor] + 'good' + string[index_not+3:]

    return string

my_string = 'The weather is not too poor today.'

print(replace_string(my_string))

# 7 assignment
# Program to find Greatest Common Divisor of two numbers.

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

num1 = int(input("Enter the first number: "))
num2 = int(input("Enter the second number: "))

print("The GCD of", num1, "and", num2, "is", gcd(num1, num2))



# 8 assignment

# Write a Python program to check whether a list contains a sublist.

main_list = [1, 2, 3, 4, 5, 6]
sub_list = [3, 4, 5]

if all(elem in main_list for elem in sub_list):
    print("Sublist found in the main list")
else:
    print("Sublist not found in the main list")





# 9 ASSIGNMENT

# Write a Python program to find the second smallest number in a list.

my_list = [5, 3, 8, 2, 9, 1, 4]

# Find the smallest number in the list
smallest = min(my_list)

# Remove the smallest number from the list
my_list.remove(smallest)

# Find the second smallest number in the list
second_smallest = min(my_list)

print("The second smallest number in the list is:", second_smallest)



# 10 ASSIGNMENT

# Write a Python program to get unique values from a list.

def unique_list(lst):
    return list(set(lst))

lst = [1, 2, 2, 3, 3, 3, 4, 5, 5, 9, 7]
print(unique_list(lst))

# 11 Assignment

# Write a Python program to unzip a list of tuples into individual lists.

def unzip_list(lst):
    return tuple(zip(*lst))

lst = [(3, 'c'), (5, 'e'), (7, 'g'), (9, 'i')]
unzipped = unzip_list(lst)
print(unzipped[0])
print(unzipped[1])

# 12 Assignment

# Write a Python program to convert a list of tuples into a dictionary.

def tuples_to_dict(lst):
    return dict(lst)

lst = [(3, 'c'), (5, 'e'), (7, 'g'), (9, 'i')]
dict_from_tuples = tuples_to_dict(lst)
print(dict_from_tuples)

# 13 Assignment

# Write a Python program to sort a dictionary (ascending /descending) by value.

my_dict = {'apple': 9, 'Grapes': 5, 'Wood Apple': 6, 'Mango': 2}

# sort in ascending order
sorted_dict_asc = dict(sorted(my_dict.items(), key=lambda item: item[1]))

# sort in descending order
sorted_dict_desc = dict(sorted(my_dict.items(), key=lambda item: item[1], reverse=True))

print("Sorted by value in ascending order:")
print(sorted_dict_asc)

print("Sorted by value in descending order:")
print(sorted_dict_desc)

# 14 Assignment

# Write a Python program to find the highest 3 values in a dictionary.

my_dict = {"a": 10, "b": 5, "c": 20, "d": 15, "e": 25}

sorted_dict = sorted(my_dict.items(), key=lambda x: x[1], reverse=True)

highest_3_values = [item[1] for item in sorted_dict[:3]]

print(highest_3_values)

# 15 assignment

# Given a number n, write a python program to make and print the list of Fibonacci series up to n.
# Input : n=7
#  Hint : first 7 numbers in the series
# Expected output :
# First few Fibonacci numbers are 0, 1, 1, 2, 3, 5, 8, 13


n = int(input("ENter the elements to be generated in fibonacci series : "))

a = 0
b = 1

print(a)
print(b)

for i in range(1, n-1):
  c = a + b
  print(c)
  a = b
  b = c

# 16 assignment

# Counting the frequencies in a list using a dictionary in Python.
# Input : [1, 1, 1, 5, 5, 3, 1, 3, 3, 1,4, 4, 4, 2, 2, 2, 2]
# Expected output : 1 : 5 , 2 : 4 , 3 : 3 , 4 : 3 , 5 : 2




lst = [1, 1, 1, 5, 5, 3, 1, 3, 3, 1, 4, 4, 4, 2, 2, 2, 2]

# Use the Counter function
freq_dict = dict(Counter(lst))

# Print the frequency counts for each element in the list
for elem, count in freq_dict.items():
    print(f"{elem} : {count}")

# 17 ASSIGNMENT

# Write a python program using function to find the sum of odd series and even series
# Odd series: 12/ 1! + 32/ 3! + 52/ 5!+……n
# Even series: 22/ 2! + 42/ 4! + 62/ 6!+……n

def factorial(n):
    fact = 1
    for i in range(2, n+1):
        fact *= i
    return fact

def odd_even_series(n):
    odd_sum = 0
    even_sum = 0
    for i in range(1, n+1):
        if i % 2 == 0:
            even_sum += (i**2) / factorial(i)
        else:
            odd_sum += (i**2) / factorial(i)
    return odd_sum, even_sum

n = int(input("Enter the value of n: "))
odd, even = odd_even_series(n)
print("Sum of odd series:", odd)
print("Sum of even series:", even)

# 18 ASSIGNMENT

# Python Program to Find Factorial of Number Using Recursion.

def factorial(n):
    if n == 1:
        return 1
    else:
        return n * factorial(n-1)

num = int(input("Enter a number: "))
print("Factorial of", num, "is", factorial(num))

# 19 ASSIGNMENT

# Write a Python function that takes a list and returns a new list with unique elements of the first list.

def unique_list(input_list):
    return list(set(input_list))


my_list = [1, 2, 2, 3, 7, 3, 6, 7, 8, 8,]
print(unique_list(my_list))

# 20 ASSIGNMENT

# Mini project :
# Problem Statement : Password Generator
# Make a program to generate a strong password using the input given by the user. To generate a password,
# randomly take some words from the user input and then include numbers, special characters and capital
# letters to generate the password. Also, keep a check that password length is more than 8 characters.
# Note: Include Exception handling wherever required. Also, make a ‘User’ class and store the details like user
# id, name and password of each user as a tuple.

import random
import string

def generate_password(input_string):
    words = input_string.split()
    random.shuffle(words)
    password = ''.join(random.choices(string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation, k=8))
    password += ''.join(random.choices(string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation, k=4))
    password += words[0] + ''.join(random.choices(string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation, k=2))
    return password

input_string = input("Enter some words: ")
while len(input_string) < 3:
    input_string = input("Please enter more than 2 words: ")

password = generate_password(input_string)
print("Generated password:", password)